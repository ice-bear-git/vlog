'''
This script accepts two files
1. File of query stats generated by generate-scipts.py which contains query, its timing by QSQR and Magic sets and all features
2. File of predictions generated by vlog-sklearn-model.py which contains (on each line a) number 1 for QSQR and 0  for magic sets
'''
import argparse

def parse_args():
    parser = argparse.ArgumentParser(description = "timing performance script")
    parser.add_argument('--statsFile', type=str, required=True, help='Training data csv file')
    parser.add_argument('--predFile', type=str, required=True, help='Test data csv file')
    return parser.parse_args()


def findTimings(statsFile, predFile):
    with open(predFile, 'r') as fin:
        predictions = fin.readlines()

    totalTime = 0.0
    totalQsqrTime = 0.0
    totalMagicTime = 0.0
    queryTypeCorrectCount = {}
    queryTypeCount = {}
    queryTypes = set()
    with open(statsFile, 'r') as fin:
        stats = fin.readlines()
        if (len(predictions) != len(stats)):
            print ("FATAL : predictions and query stats file are of different size!")
            return
        for i, stat in enumerate(stats):
            columns = stat.split()
            queryType = int(columns[1])
            queryTypes.add(queryType)
            qsqrTime = float(columns[2])
            magicTime = float(columns[3])
            totalQsqrTime += qsqrTime
            totalMagicTime += magicTime
            if (qsqrTime < magicTime):
                winner = '1.0'
            else:
                winner = '0.0'

            predicted = predictions[i].strip()
            if queryType in queryTypeCount:
                queryTypeCount[queryType] += 1
            else:
                queryTypeCount[queryType] = 1
                queryTypeCorrectCount[queryType]= 0

            if (predicted == winner):
                queryTypeCorrectCount[queryType] += 1

            if (predicted == '1.0'):
                totalTime += qsqrTime
            elif (predicted == '0.0'):
                totalTime += magicTime
    data = ""
    for qt in queryTypes:
        data += str(qt) + " " + str(float(queryTypeCorrectCount[qt]) / float(queryTypeCount[qt])) +  "\n"
    with open("typewise-accuracy.csv", "w") as fout:
        fout.write(data)
    print ("Total QSQR time = ", totalQsqrTime)
    print ("Total Magic time = ", totalMagicTime)
    return totalTime

args = parse_args()
statsFile = args.statsFile
predFile = args.predFile
time = findTimings(statsFile, predFile)
print ("Time taken to solve with online prediction : ", time )
