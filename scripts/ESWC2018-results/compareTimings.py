'''
This script accepts two files
1. File of query stats generated by generate-scipts.py which contains query, its timing by QSQR and Magic sets and all features
2. File of predictions generated by vlog-sklearn-model.py which contains (on each line a) number 1 for QSQR and 0  for magic sets
'''
import argparse
import os

def parse_args():
    parser = argparse.ArgumentParser(description = "timing performance script")
    parser.add_argument('--statsFile', type=str, required=True, help='Training data csv file')
    parser.add_argument('--predFile', type=str, required=True, help='Test data csv file')
    return parser.parse_args()


queryTypeMap = {
    1:"M_{1}",
    2:"M_{2}",
    3:"M_{3}",
    4:"M_{4}",
    50:"M_{4}",
    101:"G_{1}",
    102:"G_{2}",
    103:"G_{3}",
    104:"G_{4}",
    150:"G_{4}",
    1001:"B_{1}",
    1002:"B_{2}",
    1003:"B_{3}",
    1004:"B_{4}",
    1050:"B_{4}"
    }

def findTimings(statsFile, predFile):
    with open(predFile, 'r') as fin:
        predictions = fin.readlines()

    totalTime = 0.0
    totalQsqrTime = 0.0
    totalMagicTime = 0.0
    queryTypeCorrectCount = {}
    queryTypeCount = {}
    queryTypes = set()
    with open(statsFile, 'r') as fin:
        stats = fin.readlines()
        if (len(predictions) != len(stats)):
            print ("FATAL : predictions and query stats file are of different size!")
            return
        for i, stat in enumerate(stats):
            columns = stat.split()
            queryType = queryTypeMap[int(columns[1])]
            queryTypes.add(queryType)
            qsqrTime = float(columns[2])
            magicTime = float(columns[3])
            totalQsqrTime += qsqrTime
            totalMagicTime += magicTime
            if (qsqrTime < magicTime):
                winner = '1.0'
            else:
                winner = '0.0'

            predicted = predictions[i].strip()
            if queryType in queryTypeCount:
                queryTypeCount[queryType] += 1
            else:
                queryTypeCount[queryType] = 1
                queryTypeCorrectCount[queryType]= 0

            if (predicted == winner):
                queryTypeCorrectCount[queryType] += 1

            if (predicted == '1.0'):
                totalTime += qsqrTime
            elif (predicted == '0.0'):
                totalTime += magicTime
    data = "QueryType Accuracy\n"

    for qt in queryTypeMap.keys():
        if (queryTypeMap[qt] in queryTypeCount):
            data += queryTypeMap[qt] + " " + str(round(float(queryTypeCorrectCount[queryTypeMap[qt]]) / float(queryTypeCount[queryTypeMap[qt]]), 2)) +  "\n"

    typewiseFile = os.path.splitext(statsFile)[0] + "-typewise-accuracy.csv"
    with open(typewiseFile, "w") as fout:
        fout.write(data)
    print ("Total QSQR time = ", round(totalQsqrTime, 3))
    print ("Total Magic time = ", round(totalMagicTime, 3))
    return totalTime

args = parse_args()
statsFile = args.statsFile
predFile = args.predFile
time = findTimings(statsFile, predFile)
print ("Total online time ", round(time, 3) )
